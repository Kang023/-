<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>인터랙티브 쉬핑 마크 생성기 (저장 기능 추가)</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Noto Sans KR -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Noto Sans KR', sans-serif; background-color: #f0f2f5; }
        /* A4 Landscape Preview with 1.5cm padding */
        .a4-landscape { 
            width: 26.7cm; 
            height: 18cm; 
            padding: 1.5cm; 
            margin: 20px auto; 
            background-color: white; 
            box-shadow: 0 0 10px rgba(0,0,0,0.1); 
            box-sizing: border-box; 
        }
        .shipping-mark { 
            border: 4px solid black; 
            width: 100%; 
            height: 100%; 
            display: grid; 
            grid-template-rows: auto 1fr auto; 
            grid-template-columns: 1fr 1fr; 
            gap: 0; 
        }
        .grid-item { 
            border: 2px solid black; 
            padding: 4px 16px; 
            display: flex; 
            flex-direction: column; 
            justify-content: center; 
        }
        .item-details-grid { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 24px; 
            height: 100%; 
            align-items: center; 
        }
        .column-group { 
            display: flex; 
            flex-direction: column; 
            justify-content: center; 
            gap: 28px; 
        }
        .column-group > div > span { display: block; }
        .label { font-size: 1.25rem; font-weight: 700; margin-bottom: 2px; }
        .content { font-size: 1.8rem; font-weight: 700; word-break: break-word; min-height: 1.5em; }
        .content-large { font-size: 2.1rem; font-weight: 700; }
        .content-xl { font-size: 3.2rem; font-weight: 700; text-align: center; }
        .handwriting-space { 
            border-bottom: 2px solid black; 
            min-height: 3rem; 
            display: block; 
        }
        .controls { 
            max-width: 29.7cm; 
            margin: 20px auto; 
            padding: 20px; 
            background-color: white; 
            border-radius: 8px; 
            box-shadow: 0 0 10px rgba(0,0,0,0.1); 
        }
        input[type="text"], input[type="number"], select, button { 
            font-size: 1rem; 
            padding: 10px; 
            border-radius: 6px; 
            border: 1px solid #ccc; 
        }
        
        /* Print styles */
        @media print { 
            .no-print { display: none; } 
            body { background-color: white; } 
            .a4-landscape { margin: 0; padding: 0; box-shadow: none; border: none; } 
            @page { 
                size: A4 landscape; 
                margin: 1.5cm; 
            } 
        }
    </style>
</head>
<body>

    <div class="controls no-print">
        <!-- Message Area for user feedback -->
        <div id="message-area" class="mb-4 text-center font-bold"></div>

        <!-- Section for adding new products -->
        <div class="mb-6 p-4 border border-gray-200 rounded-lg">
            <h3 class="text-lg font-bold mb-3">새 상품 추가하기</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                    <label for="input-product-name" class="block text-sm font-medium text-gray-700">상품명</label>
                    <input type="text" id="input-product-name" class="mt-1 block w-full shadow-sm" placeholder="예: 호텔 순면 베개 커버">
                </div>
                <div>
                    <label for="input-option-name" class="block text-sm font-medium text-gray-700">옵션명</label>
                    <input type="text" id="input-option-name" class="mt-1 block w-full shadow-sm" placeholder="예: L(50/70) / White">
                </div>
                <div>
                    <label for="input-quantity" class="block text-sm font-medium text-gray-700">수량</label>
                    <input type="number" id="input-quantity" class="mt-1 block w-full shadow-sm" placeholder="예: 100">
                </div>
            </div>
            <button id="add-product-btn" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg shadow-md hover:bg-green-700 transition-colors">
                목록에 추가
            </button>
        </div>

        <!-- Section for selecting and printing -->
        <div class="mb-4">
            <label for="product-select" class="block mb-2 font-bold text-lg">상품 선택 및 관리:</label>
            <div class="flex flex-col md:flex-row gap-4 items-center">
                <select id="product-select" class="flex-grow" disabled>
                    <option>상품을 먼저 추가해주세요.</option>
                </select>
                <div class="flex gap-2 flex-wrap justify-center">
                    <button id="delete-product-btn" class="bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-red-700 transition-colors whitespace-nowrap" disabled>
                        선택 상품 삭제
                    </button>
                     <button id="clear-all-btn" class="bg-gray-500 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-gray-600 transition-colors whitespace-nowrap" disabled>
                        전체 목록 삭제
                    </button>
                    <button onclick="window.print()" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-blue-700 transition-colors whitespace-nowrap">
                        현재 양식 인쇄하기
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="a4-landscape">
        <div class="shipping-mark">
            <!-- SHIP TO: fixed value -->
            <div class="grid-item" style="grid-column: 1 / 3;"><span class="label" style="font-size: 1rem;">SHIP TO:</span><span class="content content-large">주식회사 천개상사</span></div>
            
            <!-- Product Details Section -->
            <div class="grid-item" style="grid-column: 1 / 3;">
                <div class="item-details-grid">
                    <div class="column-group">
                        <div><span class="label">상품명</span><span class="content" id="product-ko"></span></div>
                        <div><span class="label">옵션명</span><span class="content" id="product-option"></span></div>
                    </div>
                    <div class="column-group">
                        <div><span class="label">수량 (Q'TY)</span><span class="content" id="product-qty"></span></div>
                    </div>
                </div>
            </div>
            
            <!-- P/O NO. and CARTON NO. -->
            <div class="grid-item"><span class="label" style="font-size: 1rem;">P/O NO.</span><div class="handwriting-space content" style="width: 50%;">&nbsp;</div></div>
            <div class="grid-item"><span class="label" style="font-size: 1rem;">CARTON NO.</span><div class="content-xl" style="display: flex; align-items: center; justify-content: center;"><span style="display:inline-block; width: 120px; border-bottom: 2px solid black;">&nbsp;</span><span style="margin: 0 1rem;">/</span><span style="display:inline-block; width: 120px; border-bottom: 2px solid black;">&nbsp;</span></div></div>
        </div>
    </div>

    <script>
        // Global variable to hold product data
        let productData = [];
        const STORAGE_KEY = 'shippingMarkProducts';

        // DOM Elements for inputs
        const productNameInput = document.getElementById('input-product-name');
        const optionNameInput = document.getElementById('input-option-name');
        const quantityInput = document.getElementById('input-quantity');
        const addProductBtn = document.getElementById('add-product-btn');
        const deleteProductBtn = document.getElementById('delete-product-btn');
        const clearAllBtn = document.getElementById('clear-all-btn');

        // DOM Elements for preview and selection
        const select = document.getElementById('product-select');
        const productKoEl = document.getElementById('product-ko');
        const productOptionEl = document.getElementById('product-option');
        const productQtyEl = document.getElementById('product-qty');
        const messageArea = document.getElementById('message-area');

        /**
         * Shows a message to the user for a few seconds.
         * @param {string} text - The message to display.
         * @param {string} color - The text color class (e.g., 'text-green-600').
         */
        function showMessage(text, color = 'text-green-600') {
            messageArea.textContent = text;
            messageArea.className = `mb-4 text-center font-bold ${color}`;
            setTimeout(() => {
                messageArea.textContent = '';
            }, 3000);
        }

        /**
         * Saves the current product data array to localStorage.
         */
        function saveProductsToStorage() {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(productData));
        }

        /**
         * Loads product data from localStorage on page load.
         */
        function loadProductsFromStorage() {
            const storedProducts = localStorage.getItem(STORAGE_KEY);
            if (storedProducts) {
                productData = JSON.parse(storedProducts);
                populateSelect();
            }
        }

        /**
         * Updates the shipping mark preview based on the selected product index.
         * @param {number} index - The index of the product in the productData array.
         */
        function updatePreview(index) {
            if (!productData || productData.length === 0 || index < 0) {
                productKoEl.textContent = '';
                productOptionEl.textContent = '';
                productQtyEl.textContent = '';
                return;
            }
            const product = productData[index];
            productKoEl.textContent = product['상품명'] || '';
            productOptionEl.textContent = product['옵션명'] || '';
            productQtyEl.textContent = product['수량'] ? `${product['수량']} EA` : '';
        }

        /**
         * Populates the select dropdown with product options from the productData array.
         */
        function populateSelect() {
            const selectedIndexBeforeUpdate = select.value;
            select.innerHTML = ''; // Clear existing options

            if (productData.length === 0) {
                select.disabled = true;
                deleteProductBtn.disabled = true;
                clearAllBtn.disabled = true;
                const option = document.createElement('option');
                option.textContent = '상품을 먼저 추가해주세요.';
                select.appendChild(option);
                updatePreview(-1); // Clear preview
                return;
            }

            select.disabled = false;
            deleteProductBtn.disabled = false;
            clearAllBtn.disabled = false;
            productData.forEach((product, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = `${product['상품명']} / ${product['옵션명']} / ${product['수량']} EA`;
                select.appendChild(option);
            });
            
            // Try to restore previous selection or select the last one
            if (selectedIndexBeforeUpdate && select.options[selectedIndexBeforeUpdate]) {
                 select.value = selectedIndexBeforeUpdate;
            } else {
                 select.value = productData.length - 1;
            }
            select.dispatchEvent(new Event('change'));
        }

        // --- Event Listeners ---

        // Event listener for the "Add Product" button
        addProductBtn.addEventListener('click', () => {
            const productName = productNameInput.value.trim();
            const optionName = optionNameInput.value.trim();
            const quantity = quantityInput.value.trim();

            if (!productName || !optionName || !quantity) {
                showMessage('상품명, 옵션명, 수량은 필수 항목입니다.', 'text-red-600');
                return;
            }

            const newProduct = {
                '상품명': productName,
                '옵션명': optionName,
                '수량': quantity
            };

            productData.push(newProduct);
            saveProductsToStorage();
            populateSelect();
            showMessage('상품이 목록에 추가되었습니다.');

            // Clear input fields for the next entry
            productNameInput.value = '';
            optionNameInput.value = '';
            quantityInput.value = '';
            productNameInput.focus(); // Set focus back to the first input
        });

        // Event listener for the "Delete Selected Product" button
        deleteProductBtn.addEventListener('click', () => {
            const selectedIndex = select.value;
            if (selectedIndex < 0 || selectedIndex >= productData.length) {
                showMessage('삭제할 상품이 없거나 선택되지 않았습니다.', 'text-red-600');
                return;
            }
            
            const deletedProduct = productData[selectedIndex];
            productData.splice(selectedIndex, 1); // Remove the item
            
            saveProductsToStorage();
            populateSelect();
            showMessage(`'${deletedProduct['상품명']}' 상품이 삭제되었습니다.`, 'text-yellow-600');
        });
        
        // Event listener for the "Clear All" button
        clearAllBtn.addEventListener('click', () => {
             if (productData.length === 0) {
                 showMessage('삭제할 목록이 없습니다.', 'text-yellow-600');
                 return;
             }
             // Using a custom confirmation instead of window.confirm
             if (confirm('정말로 전체 목록을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                productData = []; // Clear the array
                saveProductsToStorage();
                populateSelect();
                showMessage('모든 상품 목록이 삭제되었습니다.', 'text-red-600');
             }
        });


        // Event listener for the select dropdown
        select.addEventListener('change', (e) => {
            updatePreview(e.target.value);
        });
        
        // --- Initial Load ---
        // Load data from storage when the page first loads
        document.addEventListener('DOMContentLoaded', loadProductsFromStorage);

    </script>
</body>
</html>
